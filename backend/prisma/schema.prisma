// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Room {
    id        String    @id @default(uuid())
    name      String
    public    Boolean   @default(false)
    createdAt DateTime  @default(now()) @db.Timestamptz(3)
    updatedAt DateTime? @db.Timestamptz(3)
    deleted   Boolean   @default(false)
    deletedAt DateTime? @db.Timestamptz(3)
    // owner     User?     @relation(fields: [ownerId], references: [id])
    Chat      Chat[]
}

model User {
    id               String    @id @default(uuid())
    username         String    @unique
    name             String?
    passwordHash     String
    email            String    @unique
    registrationDate DateTime  @default(now()) @db.Timestamptz(3)
    dateModified     DateTime? @db.Timestamptz(3)
    deleted          Boolean   @default(false)
    token            String?
    // deleted          Boolean   @default(false)
    // deletedAt        DateTime? @db.Timestamptz(3)
    // rooms            Room[]    @relation(fields: [id], references: [ownerId])
    // roomId           String?
    Chat             Chat[]
}

model Chat {
    id          String   @id @default(uuid())
    roomId      String // assuming 'roomId' is a foreign key to a 'Room' model
    senderId    String?
    timeSent    DateTime @default(now())
    content     String
    attachments String? // assuming attachments are stored as a string path or JSON, can be null
    room        Room     @relation(fields: [roomId], references: [id])
    user        User?    @relation(fields: [senderId], references: [id])
}
